[day08]

1. 변수의 종류
	: 선언 위치(어디에서 변수가 처음 만들어 졌느냐)에 따라 변수의 종류와 성질이 달라짐.

	1) 클래스 변수 
		- 클래스내에 생성
		- 이름앞에 static 키워드 붙는다.
		
		종류: 클래스 기본형 변수/ 클래스 참조형(레퍼런스) 변수

		특징 : 모든 인스턴스 들이 공유하는 변수
			프로그램 실행시 가장먼저 생성됨.
			new로 객체 생성하지 않아도 바로 사용가능.

		접근법 :
			클래스명.클래스변수명
			참조변수명.클래스변수명
		
	2) 인스턴스 변수
		- 클래스 내에 생성
		
		종류 : 인스턴스 기본형 변수/ 인스턴스 참조형 변수

		특징 : 각 인스턴스(객체)의 개별적인 저장 공간
			new로 객체 생성 후 메모리에 올라가면 사용가능
			가르키는 참조변수가 없을 경우 가비지 컬렉터가 수거해감.
			또는 프로그램 종료시 소멸.
		접근법 : 
			참조변수명.인스턴스변수명

	3) 지역변수
		- 메서드내 생성
		
		종류 : 지역 기본형 변수/ 지역 참조형 변수
		
		특징 : 메서드(,조건문, 반복문내)에서 선언된 변수를 가르키며, 메서드 종료시 소멸

	** 메모리 로딩 순서
	클래스 ---> 	static --->	 main 실행 ---> (new)instance
	| 클래스범위 만들고
			| 메모리에 메인포함 static들 로딩
					|main이 있다면 실행
							| 인스턴스들 생성...

클래스 = 변수 + 메서드
2. 메서드(method)

	1) 메서드 : 함수
		어떠한 작업을 수행하기 위한 명령문들의 집합. main()도 메서드.
		메서드 : 연산을 처리하는 곳
		변수 : 그 결과를 저장하는 곳
		메서드는 어떤값을 입력받아 처리하고 그 결과(하나만)를 돌려준다.(입력값, 리턴값 유/무)
		소문자로 시작하는 이름뒤에 ()소괄호가 붙어 있으면 메서드다.

		목적, 장점 : 재사용 : 반복적인 코드를 줄이고 코드 관리가 용이함.

	2) 메서드 정의와 사용
		메서드 사용 순서 : 메서드 정의 -> 호출하여 사용
	#1.입력값, 리턴값 없을 경우 
		#정의	
		리턴타입 메서드명(){
			// 수행할 명령문 작성
		}
		#호출(사용)
		메서드명();
	
	

	#2.입력값, 리턴값 모두 있을 경우

		#정의	
		리턴타입 메서드명(타입 파라미터명,타입 파라미터명,...){
			// 수행할 명령문 작성...
			return 리턴 값; 
		}
		#호출(사용)
		변수 = 메서드명(인자);

	# 메서드 진행순서 : 메서드 호출 -> 메서드 실행 -> 호출한 곳으로 다시 돌아옴(이때, 리턴값이 있으면 들고 돌아옴)
	# 개발자 작업순서 : 메서드 정의 -> 필요할때마다 호출

	3) 용어 정리
		리턴타입 : 작업을 수행하고 나온 결과의 타입. 돌려줄 결과 값의 데이터 타입
			 : 기본형타입, 클래스,void(리턴할게 없을때 사용)
		메서드명 : 변수 명명규칙 참고, 메서드명 뒤에 소괄호가 붙는다.
			   동사형으로 짓기(해당 메서드가 수행하는 기능으로 이름을 붙혀주자)
		파라미터 : ==parameter== 매개변수라고도 부름. 메서드호출시 함께 넘겨주는 데이터를 담는 변수,
			   입력되는 값이 없는 경우 괄호안에 비워두기
			   파라미터 명도 변수명명규칙 참고. 
			   파라미터도 하나의 변수이기 때문에 변수선언과 같이.
			   파라미터명 앞에 반드시 데이터타입 기술해야함
		return   : 함수를 호출한 곳으로 값을 돌려주는 키워드
			   1) 메서드를 종료시킴.
			   2) 값을 호출한 곳으로 돌려줌.
			   리턴타입이 void가 아닌 이상 반드시 return 값이 있어야함.
			   리턴타입과 return 뒤에 서술하는 값의 데이터 타입이 반드시 동일해야한다.
			   void 타입에도 어떤 조건에 의해 메서드를 중간에 강제종료하고 싶을때는
			   return; 키워드로 처리 가능
		인자     : ==arguments == 매개변수 == 인수 == 인자값 == 인수값
			   메서드를 호출시, 메서드에게 보내줄 데이터를 말함 --> 인자를 파라미터에게 전달.
		변수	 : 메서드를 실행하고 return으로 돌려받은 결과 값을 저장할 변수.
			   리턴타입과 변수의 데이터타입이 일치해야함.
	
		! 주의   : 인자와 파라미터의 개수/순서/데이터타입은 반드시 일치해야함

	4) 메서드의 종류
		#1. 클래스 메서드
			: static 키워드 붙은 메서드 //Math.random()
			  객체 생성 안하고 바로 사용가능
		#2. 인스턴스 메서드
			: 일반메서드
			  객체 생성한 후 사용 가능
			  같은 클래스내에서 사용하면 객체 생성 안해도 됨-> 메모리 생성 시기가 같아서 가능.


	5) main() 메서드 : 클래스 메서드
	
		public static void main(String [] args){
			//코드 작성 영역
	}

		public : 접근지정자 : 다른 클래스에서 메소드 접근 허용(public, private,protected)
		static : 클래스 메서드 키워드
			 자신을 포함하는 클래스의 객체가 생성되기 전에, 처음부터 JVM에 의해 호출되므로
			 static으로 선언되어야한다.
		void   : 리턴타입 : 리턴없을때 사용.

		main   : 메서드 명
		(String [] args) : 파라미터 : 메인메서드는 문자열 배열이 매개변수로 전달됨.
		{}     : 메인메서드 영역

3. JVM 메모리 구조
	1) Method Area : static 붙어있는 것들의 영역. 프로그램 실행시 먼저 생성되고, 프로그램 종료까지 남아있음
	2) Call starck : 현재 실행중인 메서드들이 차지하는 메모리 영역, 지역변수 포함.
			 스택을 여러개로 구성해서 사용 가능 -> multi thread / single thread
	3) heap	       : new로 생성되는 인스턴스들의 영역
	4) Native      : c/c++과 연동하는 작업을 할때 사용하는 영역.

4. 인자 전달방식

	자바의 인자전달방식(argument passing)은 "값의 의한 호출 : call-by-value"이다.
	호출하는 실제 인자의 값이 복사되어 메소드의 파라미터에게 전달된다.

	1) 기본형값 전달 : read only : 값만 복사해줌. 원본회손X
	2) 참조형값 전달 : read & write : 객체의 레퍼런스값(주소값)이 전달

5. 재귀 호출(recursive call)
	메서드내에서 자기자신을 호출하는 것을 말함
	반복문으로 바꿀 수 있으나 성능이 나쁨.
	기초자가 사용하기 어려우나 간결한 코드 작성 가능.


















