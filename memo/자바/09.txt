[day09]

1. 메서드 오버로딩 (method overloading)
	
	1) 한 클래스 내에, 이름이 같지만 매개변수의 타입이나 개수가 서로 다른 여러개의 메소드를
	   중복 작성가능.이를 메서드 오버로딩이라 한다. 자바 다형성의 한 경우임

	2) 조건
		#1. 메서드 이름이 동일해야한다.
		#2. 매개변수의 개수나 매개변수의 데이터타입이 서로 달라야 한다.
		
		주의) 매개변수의 이름이 다른것은 조건에 해당 안됨.
		      리턴타입은 오버로딩 조건에 해당안됨
	              int add(int a,int b) !=int add(int x, int y)

2. 생성자(constructor)

	1) 객체가 생성될때, 객체의 초기화를 위해 실행되는 메서드.
		모든클래스에는 생성자가 있으며, 생성자가 기술 안되어있으면 "기본생성자"가
		눈에 안보이지만 아무것도 없는 형태로 자동으로 만들어지고 호출한다.
		자바 초기화는 3가지 방식이 있다.

	2) 초기화 3가지 방식
		#1. 생성자 : 인스턴스변수를 초기화하기 위함
						
		#2. 초기화 블럭 : 클래스블럭 / 인스턴스블럭
				거의 안씀(안드로이드 제외)
				생성자와 초기화 블럭이 같이 있으면 실행 순서가 블럭이 먼저다.
				블럭실행해서 초기화 한 후에 생성자가 다시 초기화하게 되니 블럭을 사용할 이유가 없어짐.
	
			구조 : 
			# 클래스 블럭
			static {
				//코드 작성
			} 
			#인스턴스 블럭
			{
				//코드 작성
			}

			
		#3. 명시적 초기화 
			int a = 10; 이런식으로 바로 대입하는 방법 

	3) 생성자 선언 및 활용
		#1. 객체가 생성되는 순간에 new를 통해 자동으로 단 한번만 호출된다.
			반면, 메서드는 필요할때마다 호출가능.
		#2. 생성자의 이름은 반드시 클래스 이름과 동일
		#3. 리턴타입 지정 불가! void도 쓰지 않는다.
			하지만, 생성자에서 return;문을 사용못한다는 뜻은 아니다. 생성자 강제종료시 사용 가능.
		#4. 매개변수 지정 가능
		#5. 생성자는 오버로딩 할 수 있다.
		#6. 목적은 객체 생성시, 필요한 초기 작업을 위함.
			필드 초기화, 필요한 메모리 확보, 파일 열기, 네트워크 연결 등
			객체 활동전 필요한 초기 준비시 이용.
			
	4) 생성자 구조
		클래스명(//매개변수 있는 경우 적으면 됨){
			//초기화 시키는 코드들

		}
3. 기본생성자 (default contructor)
	
	1) 매개변수와 실행코드가 없어서 아무이도 안하는 생성자.

		클래스(){}

	2) 클래스는 생성자가 하나이상은 반드시 존재한다. 객체 생성시, 한번 반드시 실행
	   클래스는 따로 명시된 생성자가 하나도 없으면
	   컴파일러가 자동으로 내용 없는 기본 생성자를 추가한다.

	3) 기본생성자가 생성되는 경우
		ClassEx18.java 참고

	4) 기본생성자가 자동으로 생성되지 않는 경우
		매개변수를 가진 생성자가 작성되어 있을 경우,
		컴파일러는 기본생성자를 만들어 주지 않는다.

4.this 레퍼런스
	1)객체 자기 자신을 가르키는 레퍼런스이다.
		-> 현재 실행되고 있는 메서드가 속한 객체에 대한 레퍼런스
		   컴파일러에 의해 자동으로 관리됨

	2) 인스턴스 메서드나 생성자에서 사용됨.

	3) this의 필요성
		#1.지역변수나 매개변수와 인스턴스변수의 이름이 같은 경우 구별하려는 목적으로 사용
		#2. 메서드가 객체 자기자신의 레퍼런스를 리턴해야하는 경우 사용

5. this()

	1) 클래스 내 생성자가 다른 생성자 호출 할때 사용
	2) 생성자 안에서만 사용가능
	3) 생성자내에서 다른 생성자의 기능이 필요할 때 사용
	4) 생성자가 두개 이상일 경우 사용가능(생성자 오버로딩)
	5) 다른 생성자 호출 시, 반드시 생성자의 첫번째 문장이 되어야 한다.
	6) 코드 재사용성을 높이는 방법





