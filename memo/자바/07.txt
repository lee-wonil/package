[day07]

1. eclipse 설치
	
	#1. 다운
		http://eclipse.org
		Download > Download Package 선택 > 톱니바퀴모양 Java EE IDE, Windows 64bit 다운 	
	#2. 설치
		압축해제 후, eclipse 실행
	#3. 이클립스 세팅 (자바만 사용시)
		1) 오른쪽 상단의 Open Perspective(창에 +붙은) 아이콘 선택해서 Java 모드로 전환
			(설치 시, 기본 JavaEE 모드로 되어 있음)
		2) create new JavaProject 로 새 프로젝트 만들기
		3) 만들어진 프로젝트 > src 폴더 우클릭하고 패키지 만들기
		4) 패키지 선택 우클릭 > new > Class 선택해서 자바 파일 만들기
			메인메서드 자동 완성 단출키 Alt + V

2. 객체지향
	# 객체 : 실세계에 있는 우리 주변에 모든 것이 객체이다.
	# 객체지향 : 실세계의 객체를 프로그램 내에 표현하기 위해 클래스와 객체 개념을 도입한것.
	# 특징
	1) 기존 언어와 크게 다르지 않다. 몇가지만 추가됨.
	2) 코드의 재사용성이 높다 : API 사용
	3) 코드 관리가 쉽다 : 상속, 다형성, 추상화, 캡슐화....
	4) 신뢰성 높은 프로그램개발가능

	# 캡슐화(encapsulation) : 자바가 지향하는 코드 스타일
		객체를 캡슐로 싸서 내부를 보호하고 외부에서 볼 수 없게 하는것.
		외부 접근으로 부터 안전. 외부와의 접속을 위해 몇 부분만 공개노출함.
	
	# 상속(inheritance)
		부모가 자손에게 부모가 가진것들을 물려주는것.
		자바에서 상속은 자식 클레스가 부모 클래스의 "속성을 물려받고" 기능을 추가하여 "확장"하는 개념.

	# 다형성(polymorphism)
		상속관에서 성림
		같은 이름의 메소드(함수)가 클래스나 객체에 따라 다르게 동작하도록 구현되는 것을 말함.
		(메서드 오버라이딩)
		(메서드 오버로딩)
	
	# 목적
	1) 소프트웨어 생산성 향상
	2) 실세계에 대한 쉬운 모델링
	

	절차지향 : 급식소
	객체지향 : 뷔페

3. 클래스와 객체
	
	1) 클래스 (설계도)
		객체를 정의해 놓은 것
		용도는 객체를 만들기 위한것
		ex) 붕어빵 틀
	2) 객체
		실제로 존재하는 것, 사물
		클래스 모양 그대로 생성된 실체
		(설계도가 없으면 각각 따로따로 만드는 형태가 됨 -->절차지향)
		각각의 객체는 속성과 기능에 따라 다르다.
		ex) 붕어빵(팥,앙금. 슈크림)....
	
	3) 객체와 인스턴스
		객체 == 인스턴스
		객체를 클래스의 인스턴스라 부름.

	4) 객체 ( 속성+기능 )
		속성과 기능을 멤버라 부른다.
		속성 : 멤버변수, 필드
		기능 : 메서드

	5) 인스턴스(객체)의 생성과 사용

		작업순서 : 클래스 (설계도 만들기) -> 객체 생성 -> 사용

		1. 클래스 구조
		
		class 클래스명{
			변수
			메서드

		}

		# 클래스명은 패키지내 이름은 한개만 존재하게 한다.
		
		2. 인스턴스(객체)생성
		
		#1. 선언
		클래스명 레퍼런스 변수명;	String str; int []arr; Person p1;
	
		#2. 생성
		레퍼런스변수명 = new 클래스명();  	str = new String("test"); arr= new int[5]; p1= new Person();

		레퍼런스변수 : 객체를 가르키는, 객체가 저장된 실제 메모리상의 주소(레퍼런스)를 담고 있을 변수
		new : 클래스 모양의 메모리를 새로 만드는 키워드
			"제품생산한다~~~"

		3. 객체 멤버에 접근 : 점(.)연산자
			배열의 new : 배열도 객체, 인덱스(방번호)가 자동으로 만들어짐.
			배열 : 같은 타입의 여러개의 값을 저장하는 형태
			구조체 : 서로 다른 타입의 여러개의 값을 저장하는 형태(C언어, java는 업그레이드 된 클래스가 해줌)
			클래스 : 변수 + 기능, 점.연산자를 이용하여 가지고 있는 데이터에 접근



	6) 정리
		1.클래스 == 사용자 정의 데이터 타입
			기본형 : 메모리 크기가 정해진것
			클래스 : 개발자가 필요한 만큼 메모리를 직접 지정해서 만든것.
		2.클래스 : 유사한 특징을 지닌 객체들의 "속성"을 묶어 놓은 집합
		  객체 : 현실세계에 존재하는 "object"를 말함