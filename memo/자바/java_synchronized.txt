[synchronized]
1. 스레드 동기화 Thread Synchronization

	1) 동기화 필요성
		멀티스레드 : 다수의 작업을 동시에 실행 
		-> 공유자원 혹은 공유데이터에 동시 접근할때 문제점 발생할 수 있다. 
		스레드 동기화 방법은 두가지로
			- synchronized로 동기화 블럭 지정
			- wait()-notify() 메소드로 스레드 실행 순서 제어

	2) 동기화 키워드 synchronized
		순차적 실행을 위한 제어 기법.
		화장실들어가 문잠그고, 나올때 문열고 나오기와 같이 
		한 스레드가 공뷰데이터를 접근하는 순간, 데이터를 잠그고(lock) 
		나올때 락이 풀리는(unlock)하는 방법.
		
		synchronized 키워드는 하나의 메소드를 통째로 영역 지정하는 방법과
		임의의 코드 블럭을 영역으로 지정하는 방법 2가지가 있고,
		어떤방법이든지 lock/unlock 동작이 자동으로 이루어지게 컴파일된다.

		#1. 메소드 전체를 임계영역으로 지정
			* 임계영역 : (독점적으로 공유데이터를 다루는 프로그램 코드)
		
			ex)
			synchronized void add(){
				int n = getCurrentSum();	// 현재 합 알아내기
				n += 10;			// 증가
				setCurrentSum(n);		// 증가된 결과 기록
			}

			-> add()메소드가 호출되면 자동 동기화된다.
			   한 스레드가 add()호출하여 실행하는 동안에 다른 스레드가 add()호출하면
			   첫번째 스레드가 실행 마치고 완전히 빠져나오기까지 자동으로 대기하게 된다.

		#2. 코드 블록을 임계영역으로 지정
		
			void execute() {
				...........
				synchronized(this) {	//this는 인자로 주어진 객체와 연계된 lock을 사용하도록 개발자가 지정한것. 다른 레퍼런스 사용가능.
					int n = getCurrentSum();
					n += 10;
					setCurrentSum(n);
				}
				...........
			}

			-> 한 스레드가 synchronized 블록내의 코드를 실행하고 있을때 (모니터를 소유함)
			   다른 스레드가 이 블록을 실행하고자 하면, 먼저 실행중인 스레드가
			   블럭내 코드 실행을 마칠때까지 자동으로 대기한다.

2. Collections.synchronized...
	: 컬렉션(List, Set, Map 등등)을 싱글 스레드 환경에서 사용하다 멀티 스레드 환경으로 전달할 때 
	  컬렉션을 동기화(synchronized) 된 컬렉션으로 리턴해주는 메소드. 
	  ->  여러개의 스레드가 하나의 컬렉션에 접근할 때 생기는 오류를 동기화시킴으로써 해결해주는 메소드.
	
	  java.util.Collections API 참고
	  

	# 메서드
	List<T>		synchronizedList(List<T> list)			: List를 동기화된 List로 리턴
	Map<K, V>	synchronizedMap(Map<K, V> map)			: Map을 동기화된 Map으로 리턴
	Set<t>		synchronizedSet(Set<T> set)			: Set을 동기화된 Set으로 리턴
	

	# synchronizedMap은 Map 컬렉션이 멀티 스레드에 안정되게 하기 위한 메소드이다. 
	  --> 동기화를 시켰을 때 하나의 스레드가 전체 컬렉션의 모든 자원을 잠금시키기 때문에 
		전체적으로 빠르게 처리하지는 못하다는 단점을 보안한 ConcurrentHashMap도 존재.

















	

