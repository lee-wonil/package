[day19]

1.OS(operating system)
	: 하나의 소프트웨어로, 소프트웨어들을 관리하는 소프트웨어(APP)
	windows, linux, masOs, android, ios
	
	자바 -> JVM	: 자바 App을 관리하는 소프트웨어

2.Thread 스레드

	1) 프로세스(Process)
		현재 실행중인 프로그램.
		프로세스 = 프로그램을 수행하는데 필요한 데이터와 메모리 등의 자원 + 스레드
		싱글 프로세스 = 하나의 프로그램을 돌리기 위해 1개의 프로세스가 실행되는 것
		멀티 프로세스 = 하나의 프로그램을 돌리기 위해 여러개의 프로세스가 실행되는것
			ecilpse = ecilpse.exe javaw.exe
		
	2) 멀티 테스킹 (Multitasking) : multi + tasking
		테스크 (task)  = 프로세스가 하는 일
		테스킹 = 프로세스가 일을 하는것
		멀티태스킹 = 하나의 프로세스가 여러일을 하는 것

	3) 스레드(thread)
		하나의 태스크를 수행하는 아이.
		프로세스 = 공장(자원+일꾼), 스레드 = 일꾼
		싱글스레드 = 자원 + 일꾼
		멀티스레드 = 자원 + 일꾼,일꾼.........

	4) 멀티태스킹과 멀티스레딩
		멀티 태스킹을 실현하기 위한 2가지 방법
		- 멀티 프로세싱 : 여러개 프로세스로 구성
		- 멀티 스레딩 : 하나의 프로그램을 동시처리 가능하게 작업을 분할하고 작업만큼 스레드 생성
				스레드 하나당 하나의 작업 처리 	
		
	5) 자바의 멀티 스레딩
		1. 멀티 스레드, JVM
			JVM은 멀티스레딩만 지원
			Java Thread는 JVM에 의해 스케줄되는 실행단위 코드 블럭.
			
	
		
3. 스레드 만들기
	# 개발자 할일
	1. 스레드 코드 작성
	2. JVM에게 스레드 생성하고 코드를 실행하도록 요청
	
	# 구현방법
	1. Thread 클래스 상속 : 실제로 더 많이 사용하는 방법 : 제어에 필요한 기능 이미 많이 갖고 있어서
	2. Runnable 인터페이스 구현 : 문법적으로 비교적 더 좋음. 다른클래스 상속, 다중 구현 가능
				 스레드 사용 시 기능 구현을 따로 진행을 해야함 -> Thread 클래스에 비해 

	1) Thread 클래스 상속
		java.lang.Thread
		
		# 생성자
			API 참고 (상위 4개)
		# 주요 메서드 
		void		run()		: JVM에 의해 호출( 핵심 메서드 )
						  개발자는 반드시 이 메서드를 오버라이딩하여 스레드 코드 작성해야함
						  메서드 종료하면 스레드도 종료
		void		start()		: JVM에게 스레드 실행하도록 요청
		void		interrupt()	: 스레드 강제 종료.
		static void	yield()		: 다른 스레드에게 실행을 양보
		void		join()		: 스레드 종료할 때까지 기다린다.
		long		getId()		: 스레드 ID값 리턴
		String		getName()	: 스레드 이름 리턴
		int		getPriority()	: 스레드 우선순위값 리턴 . 1~10사이값
		void		setPriority(int newPriority) : 스레드 우선 순위값 n으로 변경
		Thread.State	getState()	: 스레드 상태 값 리턴
		static void	sleep(long millis) : mills 시간동안 스레드 잔다. millsecond
		static Thread	currentThread()	: 현재 실행중인 스레드 객체의 레퍼런스 리턴

		#1. 스레드 클래스 작성
		class 클래스명 extends Thread{.....}

		#2. 스레드 코드 작성 : run() 메서드 오버라이딩
		class 클래스명 extends Thread{
			@Override
			public void run(){
				// 원하는 작업의 코드 작성
				// 오버라이딩을 안할 시 Thread 클래스의 run이 실행되며
				// Thread 클래스의 run은 return; 키워드만 존재함.
				// 그럴 경우 아무것도 실행이 되지 않는다.
			}
		}

		#3. 스레드 객체 생성
		클래스명 레퍼런스변수명 = new 클래스명();
		-> 객체 생성만 했을 뿐 작동은 안함

		#4. 스레드 시작 : start()메서드 호출
		레퍼런스변수명.start();


	2) Runnable 인터페이스 구현
		: java.lang.Runnable : public void run() 추상메서드 한개만 가지고 있다.
		
		#1. 스레드 클래스 선언(정의) : Runnable 인터페이스 구현
		class 클래스명 implements Runnable{...}

		#2. 스레드 코드 작성 : run() 메서드 오버라이딩(구현)
		class 클래스명 implements Runnable{
		@Override
			public void run(){
				// 스레드로 처리하고 싶은 코드 작성
				
			}	
		}
		#3. 스레드 객체 생성
		Thread th = new Thread(new 클래스명());
		-> th라는 레퍼런스 변수명으로 동작시킬,
		   Runnable 인터페이스로 만든 스래드 클래스로 스래드 객체 만들겠다.

		#4. 스레드 시작 : start()메서드 호출
		th.start();

4. 데몬 스레드(demon thread)와 사용자 스레드(user thread)
	- 데몬 스레드 : 응용프로그램이 실행되는 동안 관리를 위해 존재하는 스레드 ex) 가비지 컬렉션 스레드
	- 사용자 스래드 : 응용프로그램에서 생성한 스레드, 우리가 만들어쓰는것 main()메서드를 실행하는 main스레드 포함
	Thread의 setDaemon(true) 호출하면 사용자 스레드를 데몬으로 바꿀 수 있다. 

	Thread th = new Thread();
	Thread th2 = new Thread();
	th2.setDemon(true);	// main스레드가 종료되면 종료된다
	th2.start();

5. 스레드 생명 주기와 스케쥴링
	1) 스레드 상태
		Thread Life Cycle : 스레드는 생성, 실행, 잠자기, 대기, 종료 등 생명주기를 가진다.
		스레드의 상태는 총 6가지 - JVM에 의해 관리

		NEW 		: 스레드 탄생, new Thread();
		RUNNABLE	: 스레드가 현재 실행되고 있거나, 실행 준비되어 스케쥴링 기다리는 상태
		TIME_WATTING	: 스레드가 sleep(long n)을 호출하여 n밀리초 동안 잠을 자는 상태
		BLOCK		: 스레드가 I/O작업을 실행하여 I/O 작업의 완료를 기다리면서 멈춘(blocked) 상태
		WATTING		: 스레드가 어떤 객체 A에 대해 a.wait()를 호출하여,
				  다른 스레드가 a.notify()/a.noifyAll()을 불러줄때까지 무한정 기다리는 상태
		TERMINATED	: 스레드 종료한 상태

	2) 스레드의 일생
		new Thread()	-> NEW 
		start()		-> RUNNABLE	
		I/O작업		-> BLOCK		
		yield()		-> RUNNABLE	양보함.
		sleep()		-> TIME_WATTING			
		wait()		-> WATTING		
		스레드종료	-> TERMINATED	

	3) 스레드 우선순위(priority)와 스케쥴링
		우선순위가 높은거 먼저, 같으면 돌아가면서 실행(round robin)

		최대값(MAX_PRIORITY) = 10
		최소값(MIN_PRIORITY) = 1
		보통값(NORMAR_PRIORITY) = 5

		# 우선순위 변경
		void setPriority(int priority);

6. 스레드 종료
	1) 스스로 종료
		run() 실행도중 return을 만나거나 run()을 완전히 실행하면.
	2) 강제 종료
		#1. interrupt()메서드 호출하여 한 스레드가 다른 스레드를 강제종료하는 경우
		#2. boolean 변수