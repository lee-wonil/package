[day05]

1. 배열 array
	
	1) 같은 타입의 여러 변수를 합쳐놓은 것
	2) 메모리 생성 시점이 느리다.
	3) 데이터 공간 수정/변경이 어렵다.
	4) 변수 == 단독 주택, 배열 == 연립주택/아파트
	5) 선언
		# 변수
		타입 변수이름 ;
	
		# 배열
		타입 [] 배열이름;	int [] nums;
		타입 배열변수이름 [];   int nums[];

		int : 배열 타입
		[]  : 배열 선언
		score : 배열에 대한 레퍼런스 변수

		선언만으로는 배열의 공간이 할당되지 않으며, nums라는 레퍼런스 변수만 생성된다.
		레퍼런스변수는 배열공간에 대한 주소값(레퍼런스값)을 가지며 그 자체가 배열은 아니다.
		배열공간이 생성되지 않았으므로 선언만 할시, 레퍼런스 변수의 초기값은 null이다.
		- > 레퍼런스 : 배열의 주소, 레퍼런스변수 : 배열의 주소를 저장하는 변수

		선언시,[] 안에 크기지정X (타언어와 혼동 금지)
		int [5]nums (X)


	6) 생성

		nums = new int[5];		새로운 메모리 박스 5개 자리 만들겠다.
		nums : 배열의 레퍼런스 변수 : 실제 5개의 데이터들이 저장될 메모리상의 주소를 저장하는 변수
		new : 메모리 생성 키워드
		int : 배열 타입
		[5] : 배열 방의 개수

	7) 인덱스
		프로그램에서는 숫자가 0부터 시작
		배열의 방은 0부터 시작하는 방번호가 매겨진다.
		방번호 == 인덱스
		인덱스를 이용하여 배열의 각각의 방에 접근 가능
	
	8) .length()
		배열의 길이(방의개수)를 알려주는 명령어
	9) 배열의 방의 크기는 데이터 타입의 크기와 일치한다.

	10) 배열은 연속되는 숫자를 방번호로 갖고 있어서 반복문과 함께 자주 쓰인다.
		
	11) 초기화
		배열 생성시 처음 들어가는 값을 초기값이라 한다.

		int [] score = {100,90,80,70,60};
		int [] score = new int[]{100,90,80,70,60};		

		중괄호 안의 요소 개수를 계산해서 방크기 자동으로 만들어줌.
		여기서 중괄호는 영역표시와 다름.
		선언과 초기화를 따로 분리 시키면 에러!!

		int [] score;
		score = {100,90,80,70,60}(x)
		score = new int[]{100,90,80,70,60}()