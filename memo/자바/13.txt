[day13]

1. 다형성 polymorphism * 중요!!

	여러가지 형태를 가질 수 있는 능력
	상속관계에서 성립가능한 문법
	참조형의 업/다운캐스팅(promotion/demotion)

2. instanceof 연산자
	참조하는 변수가 가르키는 인스턴스의 실제 타입을 체크하는데 사용
	비교하는 객체가 서로 상속관계에 있는지 확인하는 연산자. (대입 / 다형성이 가능한지)

3. 매개변수의 다형성
	일반 객체 생성과 동일한 개념으로 매개변수에서도 다형성을 이용하여 코드를 더욱 효율적으로 작성가능하다.

4. 추상클래스(abstract class)
	1) 개발할때, 밑그림을 그리는 것. 프로그램에서 설계와 구현으로 분리시키면 설계에 해당.
		ex ) 사람만들때, 뼈대 만들고 나중에 살붙이기
		     집 지을때, 문+방+화장실 등 위치 정해놓고, 사용자가 집기들 마음대로 놓는 형태.
			----> 모든 기능을 공통적으로 사용..
	2) 키워드 : abstract
	3) 추상 메서드 : abstract 키워드를 붙혀 메서드의 선언부(원형)만 있고, 구현은 되어있지 않은 형태 
		public abstract String getName();
		public abstract void setName(String name);
		* abstract 키워드를 붙히고 메서드에 중괄호 블럭과 코드를 작성하면 에러!!

	4) 추상 클래스 : 일반 멤버들과 함께 추상 메서드를 포함하는 클래스.
			 추상 메서드가 없지만  abstract 키워드로 선언 할 수 있다.
			 추상 메서드가 하나라도 있으면 무조건 추상 클래스이다.
			 * 클래스내에 추상 메서드가 있는데 abstract 키워드를 클래스 선언시 기술 안하면 에러!!
			
		abstract class Shape{
			public Shape(){}
			public abstract void draw();		// 추상메서드
		}			
			
	5) 추상클래스는 객체 생성이 불가. 불완전한/미완성인 클래스이므로 객체생성-> 메모리에 올릴 수 없다.

		Shape s= new Shape();// 불가능
		Shape s;	     // 가능 아직 new로 객체 생성을 하지 않았기 때문에.

	6) 상속에서 수퍼 클래스로 사용된다. 부모클래스가 될 수 있다. 상속 키워드 extends 사용

	7) 추상클래스를 물려받은 서브클래스를 완성 시키려면 추상메서드를 "메서드 오버라이딩"을 해야한다.
	   추상클래스를 단순히 상속만 받은 서브클래스는 그 또한 추상 클래스가 된다.
	   추상 메서드를 그대로 상속받기 때문에 구현을 하지 않는다면 서브 클래스 앞에 abstract 키워드를 붙혀줘야 한다.


	   # 추상클래스 단순 상속 --> 추상클래스
	   abstract class Rect extends Shape{
		int width;
		public Rect(){	}
	   }

	   # 추상클래스 상속 + 구현 ----> 객체 생성 가능해짐
	   class Rect extends Shape{
		int width;
		public Rect(){	}
		@Override	// 상속받은 추상메서드를 구현하여 실행 가능한 메서드로 바꿈
		public void draw(){
			System.out.println();		

		}



	   }


	8) 추상 클래스를 상속받은 서브클래스는 개발자들이 추상메서드를 모두 구현해야한다.
	   ---> 추상클래스 가이드라인, 서브클래스는 가이드를 따른 구현된 사용가능한 실제 클래스