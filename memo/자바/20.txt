[day20]

1. Network
	: 데이터를 전송할 수 있는 통신망, 전자 장비들을 연결해 놓은것

	노드  Node : 네트워크에 연결된 모든 장치들
	호스트 Host : 노드에게 하나 이상의 서비스를 제공해주는 노드
	
	네트워크 유형 : 네트워크(인터넷망) 크기와 용도에 따라 LAN,WAN으로 구성가능
			LAN Local Area Network : 작은 망, 내부에서 통신할때
			WAN Wide Area Network : 내부 -> 외부로 통신할때
			
				WAN(Internet)
			Router------------------ Router
			  |			   |
			switch			 switch
			|    |			   |
			pc  pc                     pc

	# OSI7계층 : 모든 네트워크 통신에서 생기는 여러가지 충돌 문제를 완화하기 위하여,
		     국제 표준 기구(IOS)에서 표준화된 네트워크 구조를 제시한 기본 모델.

		7 응용층
		6 표현층
		........
		1 물리층

	1) IP address : Internet Protocol Address
		: 통신을 하는 모든 기계는 네트워크상에서 유일하게 자신을 식별할 수 있는
		 "고유 주소"를 갖고 있다.
	
		IP주소는 32비트의 이진수로 구성, 보통 8비트(0~255)씩 4부분으로 나누어 십진수로 표현
		ex) 192.168.0.1	
		    192.168.0.1~254
		cmd에서 ipconfig -> ip확인 가능
			ipconfig -all -> 
		255.255.255.0 서브넷 마스크 : 네트워크 대역폭 지정
		서브넷마스크는 연속되는 1을 가지고 있어야 성립
			128 64 32 16 8 4 2 1  = 255
			  1  1  1  1 1 1 1 1  = 255 
			  1  1  1  1 1 1 1 0  = 254
			  1  1  1  1 1 1 0 0  = 252
			  1  1  1  1 1 0 0 0  = 248

			255.255.255.254 의 경우 2개만 사용 가능 
			
		숫자로된 주소는 기억하기 어려우므로 www.naver.com과 같은 문자열로 구성된
		도메인 이름으로 바꿔 사용한다.
		사용자가 도메인 이름을 사용하려면, DNS(Domain Name Server) 서버에 의해 숫자로 구성된
		IP 주소를 자동 변환.

		IPv4 : 4개의 숫자로 구성된 32비트
		IPv6 : 128비트

	2) port : 데이터를 주고 받는 통로, 여러개의 서비스를 해줄때 서로 충돌이 나지 않도록 포트를 구분해서 만들어 놓음
		포트 번호는 개발자가 임의로 선택 할수 있으나,
		기존 응용프로그램에서 사용하는 번호나 시스템 포트 번호는 피하는 것이 좋다.	
		잘 알려진 포트 번호 :  http = 80, FTP = 21, Telnet =23 emd...
		이들은 0~ 1023 사이의 번호를 가지고 있으며, 사용자 지정은 이범위를 피해서 선택하도록한다.
		cmd에서 netstat -> 현재 사용하고 있는 포트 확인 가능
	
	3) Protocol : 통신/전송 규칙
			컴퓨터간에 정보를 주고 받을때의 통신 방법에 대한 규칙과 약속.
			대표적인 표준 프로토콜의 예를 든다면 인터넷에서 사용하고 있는 TCP/IP가 이에 해당됨
	
	4) 데이터 전송 방식
		: IP 프로토콜 위에서 동작.
		#1. TCP	Transmission Control Protocol
			: 연결형 서비스를 제공. 신뢰성 높음
			ex) download
		
		#2. UDP User Datagram Protocol
			: 비연결형 서비스를 제공. 빠른 전송. 신뢰성 떨어짐
			ex) streaming service
	5) nslookup 주소
		- dns를 통해서 주소를 알 수 있다.
		

2. java.net package
	
	1) InetAddress class
		: 자바에서 IP를 다루기 위한 클래스

		# 주요 메서드
		byte[]			getAddress()		: IP주소를 byte 배열로 리턴
		static InetAddress[]	getAllByName(String host)
								: 도메인명에(host)에 지정된 모든 호스트의 IP주소를
								  배열에 담아 리턴
		static InetAddress	getByAddress(byte[] addr)
								: byte 배열을 통해 IP 주소 받기
		static InetAddress	getByName(String host)  : 도메인 명을 통해 IP 주소 리턴
		String			getHostAddress()	: 호스트의 IP주소 리턴
		String			getHostName()		: 호스트의 이름 리턴
		static InetAddress	getLocalHost()		: 지역 호스트의 IP 주소 리턴 
	
	2) URL class : Uniform Resource Location
		: 자바에서 URL을 다루기 위한 클래스
		
		프로토콜://호스트명:포트번호/경로명/파일명?쿼리스트링#참조
		ex)
		https://news.naver.com/main/read.nhn?mode=LSD&mid=shm&sid1=105&oid=016&aid=0001576732

		프로토콜 : http : 통신 규약
		호스트명 : news.naver.com
		포트번호 : 80 : 통신에 사용되는 서버의 포트 번호		
		경로명 : main : 접근하려는 자원이 저장된 서버상의 위치	: 루트컨텍스트
		파일명 : read.nhn : 접근하려는 페이지 이름
		쿼리 : ? 이후 부분
		참조 : # 이후 부분

	# uri != url

		https://news.naver.com/main/read.nhn?mode=LSD&mid=shm&sid1=105&oid=016&aid=0001576732
			--------------
			   도메인포트
				       -------------
					   URI

		서울 관악구 행운동 글로벌IT학원
		서울 강남구 역삼동 글로벌IT학원

		uri : 위치가 바뀌어도 변하지 않는 주소 ex) 글로벌IT학원
		url : 실제 존재하는 절대 주소. ex)서울 관악구 행운동 글로벌IT학원


3. 소켓프로그래밍
	: 소켓을 이용한 통신 프로그래밍
	  소켓 : 통신하는 두 응용프로그램 간의 통신 링크의 각 끝단(endpoint)
	  TCP/IP 프로토콜을 따르며, TCP/UDP 방식이 있다.
	  
	# TCP 소켓 : 클라이언트(요청자,node)와 서버(제공자,host)간의 1:1 통신
		통신은 서버가 먼저 클라이언트의 접속을 기다리고,
		클라이언트에서 서버에 접속하면, 그때 부터 서로 데이터를 주고 받을 수 있다.

		#1. 서버 프로그램에서 포트와 연결된 서버 소켓을 사용하여
		    연결 요청처리를 준비함.
		#2. 클라이언트 프로그램은 접속할 서버의 IP주소와 포트정보를 가지고 
		    소켓을 생성해서 서버에 연결 요청함.
		#3. 서버 소켓은 클라이언트의 연결요청을 받으면 서버에 새로운 소켓을 만들어
		    클라이언트 소켓과 연결되도록 한다.
		#4. 서버 소켓과 관계없이 연결된 소켓들끼리 데이터를 주고 받는다. 서버소켓은 연결만 처리
		    소켓들이 데이터를 주고 받는 연결통로는 입출력 스트림이다.
		
	구조
	클라이언트						서버
	--------------------------------------------------------------------------------------------------------
								
								[ServerSocket]
								(1)listener = new ServerSocket(서버port);
										| 대기
	[Socket]
	(3)clientSocket = new Socket(서버ip, 서버port)-------->	(2) Socket socket = listner.accept();
							접속시도

	(4) clientSocket.getOutputStream();			(4) socket.getInputStream();
			|							|
	(5) 소켓스트림을 사용하여 데이터 입출력 	<------->  소켓스트림을 이용하여 데이터 입출력
			|
	(6) clientSocket.close;			소켓닫기	(6) socket.close();


