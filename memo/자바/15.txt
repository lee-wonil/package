[day15]

1. 예외처리 Exception handling
	: 코드로 발생할 수 있는 에러를 미리 진단하고, 해결방안을 코드로 처리해 놓은 것.
	~ 컴파일 에러 : 컴파일할 때 발생 (실행조차 X) : 문법 오류, 경고있는 코드 사용했을때
	~ 런타임 에러 : 실행할 때 발생 : 문법적으로 맞아 컴파일은 되는데 입력오류등으로 실행 중 에러

	1) 예외(Exception)와 에러(error)의 차이
	- 예외 : 프로그램 코드로 해결(hendling) 가능한 것들
	- 에러 : 문법적으로(코드로) 해결 못하는 것들...
		run-time error	
	2) 예외는 메서드에서 처리, 변수는 불가능.
	3) 프로그래스바 돌아가는것 또한 예외 처리 (로딩 중임을 사용자에게 보여줌)
	4) os에도 기본적으로 돌아가는 것이 있다.
		ANR 서비스	
	5) 방법 : try ~ catch 구문		
		
		try{			
			//코드작성...... 	-> 예외 발생 가능성 있는
		}
		catch(Exception e){
			// 예외발생시 대처해야할 코드 작성
		}

	6) 예외 발생할 것이(종류가 )많으면, catch 구문을 여러개 만들어, 각각의 예외에 따른 처리를 따로 해줄 수 있다.

	7) 대표적인 예외

		ArrayIndexOutOfBoundsException : 배열 인덱스 범위 벗어난 접근시 : java.lang
		ClassNotFoundException 	: 찾고자하는 클래스가 없을 경우 : java.lang
		ArithmeticException 	: 정수를 0으로 나눌때 발생 : java.lang
		ClassCastException 	: 변환할수 없는 타입으로 객체를 변환할때 발생 : java.lang
		InterruptedException 	: thread가 멈춰있다 다시 실행 안하거나, 일시정지인데 완전 꺼지거나 하는경우
		NullPointerException	: 생성 안하고(메모리 없는데) 사용하려고 할때 발생: java.lang	
		NumberFormatException	: 문자열이 나타내는 숫자와 일치하지 않는 타입의 숫자로 변환시 발생 : java.lang
		OutOfMemoryError	: 메모리 부족시 발생 : java.lang
		IllegalArgumentException : 잘못된 인자 전달시 발생 : java.lang
		IOException		: 입출력 동작 실패 또는 인터럽트 시 발생 : java.io 
		
		
	8) finally
		예외 여부와 상관없이 무조건 실행되는 블럭
		메서드 안에서 return을 만나도 finally 블럭이 있으면 finally 실행하고 return 됨.	
				
		try{
			// 예외가 발생할 것 같은 코드를 작성
		
		}catch(Exception e){
			// 예외 발생시 처리해야되는 코드를 작성

		}finally{ (finally 생략가능)
			// 예외 발생 여부와 상관없이 무조건 실행되는 문장.			
		}

	9) run-time exception: 컴파일은 됨.
		예외발생시, 바로 catch 구문으로 넘어가고 다시 돌아가지 않는다.

	10) 예외 발생시키기
		: 고의로(강제로) 예외 발생시키는것.
		Exception e = new Exception;
		throw e;

	11) 상속구조

			Object
			  |
			Throwable
			/	|
		Exception	Error
		/ |  |
			
		Java API Documentaion에서 Runtime 상속 받고 있으면 run-time exception	: 예외처리 안해도 실행
		상속구조에서 Runtime이 없으면 compile exception	

2. 문법 정리
	1) 메모리 로딩 순서
		클래스 범위 -> static -> main() -> (new~) instance 

	2) 클래스
		변수 
			클래스변수 : 클래스명.변수명 / 레퍼런스변수명.변수명
			인스턴스변수 : 레퍼런스변수명.변수명
			지역변수 
		
		메서드 : 호출 -> 해당 메서드 실행 -> 호출한 곳으로 돌아온다.
			static (클래스) 메서드
			인스턴스 메서드
		
		초기화 : 변수를 사용(연산 등....)전에 대입되는 값.
			명시적 초기화 int a =10;
			초기화 블럭{}
			생성자 초기화

		상속 :	클래스간 1:1 상속 / Object 모든클래스의 조상
			상속받으면 부모의 변수/메서드 상속
			단일클래스 : Object를 제외하고 아무것도 상속 받지 않음

		오버로딩 : 같은 메서드명에 매개변수 타입/개수 다르게 여러개 만들 수 있는 기능
		오버라이딩 : 상속받은 메서드에 구현을 다르게 재 작성하는 기능	


		접근지정자
			클래스 : public, default(접근지정자 생략)
			메서드 : public	> protected	> default	> private

			캡슐화 : 
				변수는 private
				메소드는 public	

		static : 클래스메서드나 클래스변수 선언 시 사용하는 키워드		
		final : 마지막...
			클래스 : 상속을 할 수 없는 클래스
			메소드 : 오버라이딩 불가능하게 지정	
			변수 : 상수
			

		다형성
			- 부모의 레퍼런스 변수로 자손의 객체 담을 수 있다.
			-> 부모의 레퍼런스 변수로 자손의 오버라이딩된 메서드 사용 가능

			instanceof 키워드로 실제 담고있는 객체의 타입 검사 가능.

		추상클래스
			abstract 키워드
			상수, 변수, 메서드, 추상메서드(abstract, 구현X)
		
			class 클래스명 extend 추상클래스명{

			}

		인터페이스
			뼈대!
			상수, 추상메서드
			interface 이름{
				//상수, 추상 메서드
			}
			// 다중상속
			interface 이름 extends 인터페이스명, 인터페이스명{

			}
			// 다중 구현
			class 클래스명 implements 인터페이스명, 인터페이스명{

			}		
					
		
		
		
		
			


