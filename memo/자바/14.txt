[day14]

1. 인터페이스 interface : 규격, 추상클래스보다 더 추상적인 것.

	1) 키워드 : interface
		키워드를 사용하여 클래스를 선언하듯이 인터페이스를 선언

		# 인터페이스 선언(정의)
		class A
		interface PhoneInterface{
			//내용....

		}

	2) 인터페이스 멤버는 추상메서드와 상수로만 구성된다.

		# 인터페이스 기본 구조
		interface 인터페이스명{
			public static final 타입 변수명;	// 상수
			public abstract 리턴타입 메서드명();	// 추상메서드


		}	
	
		interface PhoneInterface{
			public static final int BUTTON = 20;
			public abstract void sendCall();
			public abstract void receiveCall();
		}

		* 인터페이스 멤버는 누구나 접근 가능하게 모두 public 타입이다.

	3) 모든 메서드는 public abstract이며 생략 가능하다.

	4) 상수는 public static final 타입이며 생략 가능하다.

		interface PhoneInterface{
			int BUTTON = 20;		// public static final 생략
			void sendCall();		// public abstract 생략
			void receiveCall();
		}

	5) 인터페이스는 객체를 생성할 수 없다.
		메서드들 모두는 구현이 전혀 안되어 있는 미완성인 추상메서드이므로
		객체 생성 불가능

	6) 인터페이스 타입의 레퍼런스 변수 선언은 가능

		PhoneInterface iPhone;	(O)
		new PhoneInterface(); 	(X)

	7) 인터페이스 상속

		인터페이스는 다른 인터페이스를 상속 받을 수 있다.
		인터페이스는 규격과 같은 것으로, 상속을 통해 기존 인터페이스에
		새로운 규격을 추가한 새로운 인터페이스를 만들 수 있다.
		
		상속 키워드 : extends

		interface PhoneInterface{
			int BUTTON = 20;		// public static final 생략
			void sendCall();		// public abstract 생략
			void receiveCall();
		}
	
		interface MobilePhoneInterface extends PhoneInterface{
			void sendSMS();			// 새로운 추상메서드 추가
			void receiveSMS();

		}

		* 인터페이스의 다중 상속 허용!!!
		interface DualCamerPhoneInterface extends MobilePhoneInterface, CameraInterface{
			void makeVideo();
		}

	8) 인터페이스 구현
		인터페이스의 추상메서드를 모두 구현한 클래스를 작성하는 것.
		
		구현 키워드 : implements

		class IPhone implements DualCamerPhoneInterface {
			// 상수는 가지고 있음
			// 추상메서드 구현
			public void sendCall(){...}
			public void receiveCall(){...}
			public void sendSMS(){...}
			public void receiveSMS(){...}
			public void makeVideo(){...}
			public void takePicture(){...}

			// 추가적으로 다른 인스턴스 메서드들, static메서드들 인스턴스변수, 스태틱변수,상수, 생성자
	
		}			
		
		* 추상메서드 중 하나라도 구현을 안하면 에러
	9) 인터페이스의 목적
		MobilePhoneInterface를 통해 IPhon클래스, SamsungPhone 클래스를 만들어
		안에 추상메서드를 각각의 클래스마다 다른 기능을 구현하게 되는데,
		동일한 이름의 메서드를 구현하나 내용(기능)은 서로 다를것이다. ---> 다형성
		
	10) 인터페이스의 다중 구현
		클래스는 하나 이상의 인터페이스 구현가능.
		-> 모두 추상메서드를 갖고 있지만, 추상클래스보다 인터페이스를 많이 사용하는 이유는
		   다중 구현이 가능하기 때문.

2. 싱글톤 Singleton 

	1) 싱글톤의 구성 요소
		#1. 자신 클래스 타입의 private static 변수

			private static 클래스명 instance(변수명임) = new 클래스명();
		
		#2. private 생성자
			private 클래스명(){}
		
		#3. static 메서드
			: 단 한개만 생성된 객체를 외부로 리턴하여 사용하게 해주는 메서드( public은 필요에 따라 붙히기)

			public static 클래스명 getInstance(){
				return instance;
			}

	2) 사용 이유 : 무분별한 객체 생성을 막아 메모리 효율성을 높이고, 보안을 더 높여주는 방법
	3) 사용 할때 : 프로젝트 내에서 객체가 한개만 존재해야 할때.
		       클래스내에 멤버들이 변경될 일이 없을때. 구성요소가 고정일때.


3. 내부 클래스 inner class
	: 중첩클래스 nasted class 라고도 함
	  클래스 내부에 또 다른 클래스를 정의하는ㄱ것.
	  이유 : 은닉화를 위해 사용
		 보안 강화, 코드 간결, 멤버 접근 쉽게.

	1) 구조
		class 외부클래스{
			외부클래스 변수;
			외부클래스 메서드()....
			
			class 내부클래스{
				내부클래스 변수;
				내부클래스 메서드()...
			}

		}

	2) 종류 : 클래스 선언(정의) 위치에 따라 구분

		#1. 멤버클래스
			1. 인스턴스 멤버 클래스
				: A클래스 객체를 생성해야만 사용할 수 있는 B 내부클래스				

				class A{
					....
					class B{
						....

					}
				}
			2. static 멤버 클래스
				: A 클래스를 통해 바로 접근 가능한 B 내부클래스
				class A{
					....
					static class B{
						...
					}			

				}
			* 멤버 클래스도 하나의 클래스이므로 컴파일하면 바이트코드파일(.class)별도로 생성
				A $ B.class
		#2. 로컬(지역)클래스
			: method()가 실행될때만 사용할 수 있는 B내부클래스. 메서드 종료되면 없어짐

			class A{
				...
				void method(매개변수){
					class B{
						....

					}

				}

			}

			# 바이트코드파일 : A $1 B.class

	3) 인스턴스 멤버 클래스
		: 인스턴스변수와 메서드만 선언가능, static 변수와 메서드는 선언 불가
		# 클래스 정의(선언)
		class A{
			class B{
				B(){}
				int x;
				void method(){}		
				//static int y;				(X)
				//static void method2(){}		(X)
			}

		}

		# 객체 생성
			: A클래스 외부에서 B객체를 생성하려면, 먼저 A클래스를 생성하고 B객체를 생성해야한다.

		class Test{
			main(){
				A a = new A();
				A.B b = a.new B();
				b.x=10;
				b.method();
			}
		}

	4) static 멤버 클래스 
		: static 키워드가 붙은 내부 클래스를 말함. 모든 종류의 변수와 메서드 선언가능
		# 클래스 정의(선언)
		class A{
			static class B{
				B(){}
				int x;
				void method(){}		
				//static int y;				
				//static void method2(){}		
			}
		}
		
		# 객체 생성
		A.B b = new A.B();
		b.x =10;
		b.method();
		A.B.y = 20;
		A.B.method2();

	5) 로컬(지역)클래스
		: 접근제어자와 static을 붙일 수 없다.
		  인스턴스 변수와 메서드만 선언 가능. static 불가

		# 클래스 정의
		void method(){	
			class B{
				B(){}
				int x;
				void method(){}		
				//static int y;				(X)
				//static void method2(){}		(X)
			}
			//객체 생성
			B.b = new B();
			b.x=10;
			b.method();
		}
		# 객체 생성 : 메서드 내부에서 이루어짐.(클래스정의와 동등한 위치)

	6) 내부클래스 접근 제어자
		#1.
		class A{
			// 인스턴스 변수
			B b = new B();
			C c = new C();
			// 인스턴스 메서드
			void func1(){
				B b1 = new B();
				C c1 = new C();
			
			}
			// static 변수
			//static B b2 = new B();		(X)
			static C c2 = new C();			(O)

			//static 메서드
			static void func2(){
				//B b3 = new B();		(X)
				C c3 = new C();			(O)
			}

			class B{}
			class class C{}

		}
		#2.
		class A{
			int x;
			void func1(){...}
			static int y;
			static void func2(){....}
			class B{
				void method(){
					x = 10;
					func1();
					y = 10;
					func2();
				}
			}
		}	
		#3.	
		class A{
			int x;
			void func1(){...}
			static int y;
			static void func2(){....}
			static class B{
				void method(){
					//x = 10;	(X)
					//func1();	(X)
					y = 10;
					func2();
				}
			}
		}
		#4. 로컬 클래스는 외부클래스의 변수와 메서드를 제한 없이 사용가능
		    문제는 메서드의 매개변수나 지역변수를 로컬클래스에서 사용할 때이다.
		    
		void method(int arg1,int arg2){
			int x =10;
			int y =20;
			class B{	//arg1,arg2, x, y가  내부클래스 B안에 값이 변경안되는 final의 성질을 갖고 복사되어진다.
				void func(){
					int result = arg1+arg2+x+y;
				}

			}
	
		}

	7) 내부 클래스에서 외부클래스 참조 얻기
		외부클래스.this.변수;
		외부클래스.this.메서드명();

	   내부 클래스에서 내부클래스 참조 얻기
		this.변수;
		this.메서드명();

	class A{
		int a;
		void func(){...}
		class B{
			int a;			
			void method(int a,int b){
				A.this.a=a;
				this.b=a;	
			}
		}

	}		

4. 익명 클래스 annoymous class
	: 이름이 없는 클래스
	  객체 이름이 없지만 클래스를 정의하고 동시에 객체를 생성함.
	  변수의 초기값, 지역변수의 초기값, 매개변수의 매개값으로 주로 대입됨.
	  이벤트 처리할때나 스레드 객체를 간편하게 생성할 목적으로 활용됨
	  단독으로 생성 불가, 클래스를 상속하거나 인터페이스를 구현해야 생성가능.


	1) 구조
		new 클래스명(){
			// 클래스 정의

		}
		new 인터페이스명(){
			// 메서드 오버라이딩


		}










	
































