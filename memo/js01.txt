[java_script 01]

1. 자바스크립트
	객체 기반의 스크립트 프로그래밍 언어
	웹브라우저 내에서 주요 사용, 다른 응용 프로그램의 내장 객체에 접근 가능한 기능 있음.
	프론트엔드 개발 : HTML, CSS, Javascript, jQuery 등 이용해서 사용자의 눈에 보이는 부분까지 개발
	HTML : 웹 페이지에 보여줄 요소 나열 (정적)
	CSS  : 세부 디자인 담당
	Javascript : 정적인 웹 문서에 동작 부여 (동적)
	
2. 기본사항
	
	# 자바 스크립트 작성 방법(위치)	
	1) HTML 문서의 <head> 태그 안, <script>와 </script> 태그 사이에 작성
	2) 확장자 .js 페이지로 분리해서 만들고 HTML문서에 링크 연결
		<script src="js파일경로"></script>

	# 주석
		html 	: <!-- 내용 -->
		js   	: // 한줄주석, /* 여러줄 주석 */
	
		;	: 문장의 끝을 의미함	
	
3. 변수
		
	# 변수의 선언
	var 변수명;	
	
	# 변수의 선언 + 초기화
	var 변수명 = 값;
	
	var 변수명, 변수명,...;
	var 변수명=값,변수명=값;

	# 변수 명명 규칙
		- 숫자로 시작X
		- 대소문자 구분 ex) name ≠ Name
		- 소문자로 시작
		- 예약어(키워드) 사용 불가
		- 띄어쓰기 불가
		- 특수문자 _, $ 만 가능
		- 상수 모두 대문자

4. 데이터 타입

	1) 숫자형 Number
		정수 : 10진수
		       16진수 웹에서 색상값 나타낼 때 사용 ex ) var color = 0xF00; var color = #F00;
 		실수

	2) 문자형 String
	3) 논리형 boolean
	4) undefined
		: 변수를 선언만 하고, 초기화 하지 않은 상태
		: 함수 인자값 없이 호출되는 경우
		:존재하지 않는 프로퍼티를 접근한 경우
	5) 초기화
		숫자 0
		문자열 ""
		논리 false
		객체 null
5. 출력
	1) alert() 함수	:  알림창에 출력
		
		alert(내용);
	
	2) document.write() : 브라우저 화면에 출력
	
		document.write(내용);
		document.write(내용,내용)

	3) console.log() : 디버깅 도구
	
		console.log(내용);


6. 연산자
	1) 산술연산자
		+ - * / %
	2) 대입연산자
		=
	3) 복합대입연산자
		+= -= *= /= %=
	4) 증감연산자
		++ -- (전위형, 후위형)
	5) 비교연산자
		> >= < <=
		==	: 데이터 타입 관계없이 두 값이 같을때 true
		===	: 데이터 타입도 일치해야 true
		!=	: 데이터 타입 관계없이 다르면 true
		!==	: 데이터 타입도 일치하게 다르면 true
	6) 논리연산자
		||	: or
		&&	: and
		!	: not
	7) 삼항연산자
		조건식 ? 참일때 값:거짓일때 값
	
	8) 연산자 우선순위 ( 상->하, 좌-> 우, 기본 계산 방향 좌-> 우)
		(), []
		! ++ --				계산방향 우->좌
		* / %		+ -
		> >= < <=	== === != !==
		&&		||
		? :				계산방향 우->좌
		대입연산자


7. 입력문

	변수 = prompt("질문", "default 답변")

	입력받은 데이터는 모두 문자타입으로 저장됨.
	숫자로 이용하려면 형변환 필요.

8. 형변환

	# 자동 형변환 (암시적)
		1) 숫자 + 문자 		=> 문자
		2) boolean + 문자 	=> 문자
		3) boolean + 숫자 	=> 숫자
		
		10+"" -> "10"
	# 강제 형변환 (명시적)
		1) 문자 -> 숫자
			정수 : parseInt()
			       Number()
			실수 : parseFloat()
			       Number()

		2) 숫자 -> 문자
		 	일반문자 : String()
			16진수	 : .toString(진수)
			실수문자 : .toFixed(소수점 자리수)

9. 제어문
	조건문 : if, switch
	반복문 : while, do while, for
	보조제어문 : continue, break


10. 배열 array

	1) 기본 구조

		# 1. 배열 객체 생성
			var 참조변수명 = new Array();

		# 2. 사용
			참조변수[0] = 값;

		# 3. 배열 객체 생성 + 초기값
			var 참조변수명 = new Array(값1, 값2, 값3,.....); 
			
			var 참조변수명 = [값1, 값2, 값3,.....]; 
		
			* 배열 구분기호 : []

11. 함수 (자바에서 method)

	1) 함수의 구조

		#1. 정의
		function 함수명(매개변수, 매개변수){
			//실행 코드들...;
			return 값;		
		}
	
		#2. 사용(호출)
		변수 = 함수명(인자, 인자);

	2) 변수의 스코프
		: 변수 또는 함수의 유효범위를 말함

		#1. 전역변수 (Global variable)
			선언위치 : 함수 밖
			사용범위 : 자바스크립트 전체 영역

		#2. 지역변수 (Local variable)
			선언위치 : 함수 내
			사용범위 : 함수 내

	3) 함수의 스코프
		
		#1. 전역 함수
			전역변수와 동일

		#2. 지역 함수
			정의 위치 : 함수 내
			사용 범위 : 정의된 함수를 품고 있는 함수 내


	4) 변수에 함수 저장하기
		: 자바 스크립트에서는 함수도 변수에 저장가능
		  변수에 함수를 저장하면 변수를 함수처럼 사용가능.

		var 변수명 = 함수명;
		변수명(매개변수,....);

	5) 매개변수 값으로 함수 사용하기
		: 매개변수 역시 변수이기때문에 함수를 받아 사용 가능

	6) 리턴값으로 함수 사용하기
		: 함수는 어떤 값이든 리턴가능. 즉 함수도 리턴 가능

12. 함수 리터럴과 익명함수
	
	1) 리터럴
		: 자바스크립트에서 데이터를 만드는 방법은 크게 두가지로,
		  리터럴 방식과 객체 방식 두가지가 있다.

			리터럴 방식		객체방식
		------------------------------------------------------
		숫자   var num =10;		var num = new Number(10);
		문자   var name = "abc";	var name = new String("abc");
		불린   var play = true;		var play = new Boolean(true);
		배열   var arr = [1,2,3];	var arr = new Array(1,2,3);

	2) 함수 리터럴
		: 함수 이름을 주지 않고 만들면 된다.

		# 함수 만드는 방법 3가지
		
		#1. 리터럴
			var hello = function(name){
				// 코드 작성
			}

		#2, 일반적인 방식(호이스팅 가능)
			function hello(name){
				// 코드 작성
			}
	
		#3. 객체 방식
			var hello = new Function("name", "코드작성");

	3) 익명함수 : 리터럴방식의 함수를 말함
	
		호이스팅 불가능.
		일반함수 : 재사용할경우
		익명함수 : 재사용안할경우